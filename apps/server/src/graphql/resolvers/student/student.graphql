type getEnrolledListResponse {
  enrolledRecords: [EnrolledRecord]
  length: Int
}

type getStudentsResponse {
  students: [Student]
  length: Int
}

input updateStudentBasicInfoInput {
  first_name: String!
  middle_name: String!
  last_name: String!
  birthday: String!
  contact_number: String!
  email: String!
  LRN: String!
}

input updateStudentEnrollmentInfo {
  section_id: String!
  status: String!
}

input updateStudentParentInfo {
  mother: StudentParentGuardianInput
  father: StudentParentGuardianInput
  guardian: StudentParentGuardianInput
}

input getEnrolledArchiveListFilter {
  SY: String
}

input filterGetStudents {
  search: String
  status: String
}

input filterGetEnrolledList {
  search: String
  status: String
  year_level: String
  section: String
}

input enrollStudentInput {
  year_level: String!
  section: String!
  id: String!
}

input filterGetEnrolledArchiveList {
  search: String
  status: String
  year_level: String
  section: String
  school_year: String
}

type validateStudentIDsResponse {
  message: String!
  LRNs: [String]
  isValid: Boolean!
}

type Query {
  getStudents(
    limit: Int
    offset: Int
    filter: filterGetStudents!
  ): getStudentsResponse
  getStudent(SID: String!): Student
  getEnrollmentRecord(EID: String!): EnrolledRecord!
  getEnrolledList(
    limit: Int
    offset: Int
    filter: filterGetEnrolledList!
  ): getEnrolledListResponse
  getEnrolledArchiveList(
    limit: Int!
    offset: Int!
    filter: filterGetEnrolledArchiveList!
  ): getEnrolledListResponse
  checkUniqueLRN(LRN: String!, currentLRN: String): Boolean!
  getStudentToEnrollList(search: String!): [Student]
  validateStudentIDs(LRNs: [String]): validateStudentIDsResponse!
}

type Mutation {
  updateStudentBasicInfo(
    input: updateStudentBasicInfoInput!
    ID: String!
  ): Student
  updateStudentEnrollmentInfo(
    input: updateStudentEnrollmentInfo!
    EID: String!
  ): EnrolledRecord
  updateStudentAddressInfo(input: StudentAddressInput!, ID: String!): Student
  updateStudentRequirementInfo(
    input: StudentRequirementsInput!
    ID: String!
  ): Student
  updateStudentParentInfo(input: updateStudentParentInfo!, ID: String!): Student
  updateStudentAcademicRecords(
    input: [StudentSchoolRecordInput]!
    ID: String!
  ): Student
  addStudent(input: StudentInput!): Student
  addStudents(input: [StudentInput]!): [Student]
  dropEnrollmentRecord(input: [String]): [EnrolledRecord]
  enrollStudent(input: enrollStudentInput!): Student
}
